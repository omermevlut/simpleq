// Code generated by MockGen. DO NOT EDIT.
// Source: driver.go

// Package simpleq is a generated GoMock package.
package simpleq

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDriver is a mock of Driver interface.
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver.
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance.
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// GetStats mocks base method.
func (m *MockDriver) GetStats() (*Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats")
	ret0, _ := ret[0].(*Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockDriverMockRecorder) GetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockDriver)(nil).GetStats))
}

// Read mocks base method.
func (m *MockDriver) Read(queue string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", queue)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockDriverMockRecorder) Read(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockDriver)(nil).Read), queue)
}

// Register mocks base method.
func (m *MockDriver) Register(queue string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", queue)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockDriverMockRecorder) Register(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockDriver)(nil).Register), queue)
}

// SetFailed mocks base method.
func (m *MockDriver) SetFailed(queue, taskID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFailed", queue, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFailed indicates an expected call of SetFailed.
func (mr *MockDriverMockRecorder) SetFailed(queue, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFailed", reflect.TypeOf((*MockDriver)(nil).SetFailed), queue, taskID)
}

// SetProcessed mocks base method.
func (m *MockDriver) SetProcessed(queue string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProcessed", queue)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProcessed indicates an expected call of SetProcessed.
func (mr *MockDriverMockRecorder) SetProcessed(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProcessed", reflect.TypeOf((*MockDriver)(nil).SetProcessed), queue)
}

// Write mocks base method.
func (m *MockDriver) Write(queue string, d []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", queue, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockDriverMockRecorder) Write(queue, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockDriver)(nil).Write), queue, d)
}
