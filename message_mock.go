// Code generated by MockGen. DO NOT EDIT.
// Source: message.go

// Package simpleq is a generated GoMock package.
package simpleq

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTask is a mock of Task interface.
type MockTask struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMockRecorder
}

// MockTaskMockRecorder is the mock recorder for MockTask.
type MockTaskMockRecorder struct {
	mock *MockTask
}

// NewMockTask creates a new mock instance.
func NewMockTask(ctrl *gomock.Controller) *MockTask {
	mock := &MockTask{ctrl: ctrl}
	mock.recorder = &MockTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTask) EXPECT() *MockTaskMockRecorder {
	return m.recorder
}

// Fail mocks base method.
func (m *MockTask) Fail(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Fail", err)
}

// Fail indicates an expected call of Fail.
func (mr *MockTaskMockRecorder) Fail(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fail", reflect.TypeOf((*MockTask)(nil).Fail), err)
}

// Run mocks base method.
func (m *MockTask) Run(c Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockTaskMockRecorder) Run(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockTask)(nil).Run), c)
}

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// Bind mocks base method.
func (m *MockContext) Bind(v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockContextMockRecorder) Bind(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockContext)(nil).Bind), v)
}

// GetAttempts mocks base method.
func (m *MockContext) GetAttempts() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttempts")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetAttempts indicates an expected call of GetAttempts.
func (mr *MockContextMockRecorder) GetAttempts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttempts", reflect.TypeOf((*MockContext)(nil).GetAttempts))
}

// GetContent mocks base method.
func (m *MockContext) GetContent() Content {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContent")
	ret0, _ := ret[0].(Content)
	return ret0
}

// GetContent indicates an expected call of GetContent.
func (mr *MockContextMockRecorder) GetContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContent", reflect.TypeOf((*MockContext)(nil).GetContent))
}

// GetID mocks base method.
func (m *MockContext) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockContextMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockContext)(nil).GetID))
}

// GetMaxAttempts mocks base method.
func (m *MockContext) GetMaxAttempts() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxAttempts")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxAttempts indicates an expected call of GetMaxAttempts.
func (mr *MockContextMockRecorder) GetMaxAttempts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxAttempts", reflect.TypeOf((*MockContext)(nil).GetMaxAttempts))
}

// Marshal mocks base method.
func (m *MockContext) Marshal() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockContextMockRecorder) Marshal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockContext)(nil).Marshal))
}

// NewAttempt mocks base method.
func (m *MockContext) NewAttempt() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewAttempt")
}

// NewAttempt indicates an expected call of NewAttempt.
func (mr *MockContextMockRecorder) NewAttempt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAttempt", reflect.TypeOf((*MockContext)(nil).NewAttempt))
}

// SetContent mocks base method.
func (m *MockContext) SetContent(c Content) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContent", c)
}

// SetContent indicates an expected call of SetContent.
func (mr *MockContextMockRecorder) SetContent(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContent", reflect.TypeOf((*MockContext)(nil).SetContent), c)
}

// SetID mocks base method.
func (m *MockContext) SetID() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetID")
}

// SetID indicates an expected call of SetID.
func (mr *MockContextMockRecorder) SetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetID", reflect.TypeOf((*MockContext)(nil).SetID))
}

// SetMaxAttempts mocks base method.
func (m *MockContext) SetMaxAttempts(a int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxAttempts", a)
}

// SetMaxAttempts indicates an expected call of SetMaxAttempts.
func (mr *MockContextMockRecorder) SetMaxAttempts(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxAttempts", reflect.TypeOf((*MockContext)(nil).SetMaxAttempts), a)
}
