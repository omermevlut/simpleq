// Code generated by MockGen. DO NOT EDIT.
// Source: queue.go

// Package simpleq is a generated GoMock package.
package simpleq

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQueueable is a mock of Queueable interface.
type MockQueueable struct {
	ctrl     *gomock.Controller
	recorder *MockQueueableMockRecorder
}

// MockQueueableMockRecorder is the mock recorder for MockQueueable.
type MockQueueableMockRecorder struct {
	mock *MockQueueable
}

// NewMockQueueable creates a new mock instance.
func NewMockQueueable(ctrl *gomock.Controller) *MockQueueable {
	mock := &MockQueueable{ctrl: ctrl}
	mock.recorder = &MockQueueableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueable) EXPECT() *MockQueueableMockRecorder {
	return m.recorder
}

// OnExec mocks base method.
func (m *MockQueueable) OnExec(task Task) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnExec", task)
}

// OnExec indicates an expected call of OnExec.
func (mr *MockQueueableMockRecorder) OnExec(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnExec", reflect.TypeOf((*MockQueueable)(nil).OnExec), task)
}

// Push mocks base method.
func (m *MockQueueable) Push(t Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockQueueableMockRecorder) Push(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockQueueable)(nil).Push), t)
}

// Requeue mocks base method.
func (m *MockQueueable) Requeue(t Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Requeue", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Requeue indicates an expected call of Requeue.
func (mr *MockQueueableMockRecorder) Requeue(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Requeue", reflect.TypeOf((*MockQueueable)(nil).Requeue), t)
}

// Stop mocks base method.
func (m *MockQueueable) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockQueueableMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockQueueable)(nil).Stop))
}
